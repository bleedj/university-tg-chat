require("dotenv").config(); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ dotenv –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
 
// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
const dayMapper = {
  Sunday: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
  Monday: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
  Tuesday: "–í—Ç–æ—Ä–Ω–∏–∫",
  Wednesday: "–°—Ä–µ–¥–∞",
  Thursday: "–ß–µ—Ç–≤–µ—Ä–≥",
  Friday: "–ü—è—Ç–Ω–∏—Ü–∞",
  Saturday: "–°—É–±–±–æ—Ç–∞",
};
 
// –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ Telegraf –∏ Markup –∏–∑ –ø–∞–∫–µ—Ç–∞ telegraf
const { Telegraf, Markup } = require("telegraf");
// –ò–º–ø–æ—Ä—Ç –ø–∞–∫–µ—Ç–∞ axios –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
const axios = require("axios");
// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
const deadlinesData = require("./assets/deadlines.json");
// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
const faqData = require("./assets/faq.json");
 
// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new Telegraf(process.env.BOT_TOKEN);
// –ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É CHAD –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const CHAD_API_KEY = process.env.CHAD_API_KEY;
 
// –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const deadlines = JSON.parse(JSON.stringify(deadlinesData));
const faq = JSON.parse(JSON.stringify(faqData));
 
const account = "https://org.fa.ru/"; // –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
const schedule = "https://ruz.fa.ru/"; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
const campus = "https://campus.fa.ru/"; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–º–ø—É—Å
 
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å –º–µ—Å—è—Ü–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≥–æ–¥, —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã'
function formatDate(date) {
  const options = {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
  };
  return date.toLocaleString("ru-RU", options);
}
 
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
async function fetchSchedule(period) {
  try {
    const currentDate = new Date();
    let startDate, finishDate;
 
    if (period === "day") {
      startDate = currentDate.toISOString().split("T")[0];
      finishDate = startDate;
    } else if (period === "week") {
      startDate = currentDate.toISOString().split("T")[0];
      finishDate = new Date(currentDate.getTime() + 7 * 24 * 60 * 60 * 1000)
        .toISOString()
        .split("T")[0];
    }
 // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –µ–≥–æ –∫ json
    const url = `https://ruz.fa.ru/api/schedule/group/111296?start=${startDate}&finish=${finishDate}`;
    const response = await fetch(url);
    const data = await response.json();
 // —Ñ–∏–ª—å—Ç—Ä –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π 
    const extractedData = data.map((item) => ({
      date: item.date,
      dayOfWeekString: item.dayOfWeekString,
      beginLesson: item.beginLesson,
      endLesson: item.endLesson,
      group: item.group,
      discipline: item.discipline,
      lecturer: item.lecturer,
      lecturerEmail: item.lecturerEmail,
      kindOfWork: item.kindOfWork,
      auditorium: item.auditorium,
    }));
 
    return extractedData;
  } catch (error) {
    console.error("Error fetching or processing data:", error);
    return null;
  }
}
 

 
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendSchedule(ctx, response) {
  if (!response || response.length === 0) {
    ctx.reply("–ù–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.");
    return;
  }
 
  let currentDate = "";
  let currentDayMessages = [];
 
  response.sort((a, b) => new Date(a.date) - new Date(b.date));
 
  for (const item of response) {
    const formattedDate = formatDateInSchedule(item.date);
 
    if (formattedDate !== currentDate) {
      if (currentDayMessages.length > 0) {
        const fullDayMessage = currentDayMessages.join("\n");
        await sendMessageWithDelay(ctx, fullDayMessage);
        currentDayMessages = [];
      }
      currentDate = formattedDate;
      currentDayMessages.push(`*${formattedDate}*\n\n`);
    }
 
    let lecturer = item.lecturer ? item.lecturer : "_–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö_ üòû";
    let lecturerEmail = item.lecturerEmail
      ? item.lecturerEmail
      : "_–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö_ üòû";
 
    let scheduleString = `*–ù–∞—á–∞–ª–æ:* ${item.beginLesson}, *–ö–æ–Ω–µ—Ü:* ${item.endLesson}\n`;
    scheduleString += `*–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:* ${item.discipline}\n`;
    scheduleString += `üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* ${lecturer}\n`;
    scheduleString += `üì© *Email:* ${lecturerEmail}\n`;
    scheduleString += `üìö *–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è:* ${item.kindOfWork}\n`;
    scheduleString += `üè¢ *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* ${item.auditorium}\n\n`;
 
    currentDayMessages.push(scheduleString);
  }
 
  if (currentDayMessages.length > 0) {
    const fullDayMessage = currentDayMessages.join("\n");
    await sendMessageWithDelay(ctx, fullDayMessage);
  }
}
 
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async function sendMessageWithDelay(ctx, message) {
  await new Promise((resolve) => setTimeout(resolve, 500));
  await ctx.replyWithMarkdown(message);
}
 
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
function formatDateInSchedule(dateString) {
  const date = new Date(dateString);
  const days = [
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–í—Ç–æ—Ä–Ω–∏–∫",
    "–°—Ä–µ–¥–∞",
    "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ü—è—Ç–Ω–∏—Ü–∞",
    "–°—É–±–±–æ—Ç–∞",
  ];
  const months = [
    "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä–µ–ª—è",
    "–º–∞—è",
    "–∏—é–Ω—è",
    "–∏—é–ª—è",
    "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫–∞–±—Ä—è",
  ];
  const dayOfWeek = days[date.getDay()];
  const dayOfMonth = date.getDate();
  const month = months[date.getMonth()];
  return `${dayOfWeek}, ${dayOfMonth} ${month}`;
}
 
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã"
bot.action("all_deadlines", (ctx) => {
  let response = "*–í—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã:*\n\n";
 
  deadlines.deadlines.forEach((student) => {
    student.deadlines.forEach((deadline) => {
      response += `‚úçüèΩ *–ü—Ä–µ–¥–º–µ—Ç:* ${deadline.object}\n‚è∞ *–î–µ–¥–ª–∞–π–Ω:* ${formatDate(
        new Date(deadline.date)
      )}\n\n`;
    });
  });
 
  ctx.reply(response, { parse_mode: "Markdown" });
});
 
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞ –¥–µ–Ω—å"
bot.action("schedule_day", async (ctx) => {
  try {
    const response = await fetchSchedule("day");
    sendSchedule(ctx, response);
  } catch (error) {
    console.error("Error:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.");
  }
});
 
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é"
bot.action("schedule_week", async (ctx) => {
  try {
    const response = await fetchSchedule("week");
    sendSchedule(ctx, response);
  } catch (error) {
    console.error("Error:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.");
  }
});
 
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/question"
bot.command("question", (ctx) => {
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:");
  bot.on("text", async (ctx) => {
    const question = ctx.message.text;
 
    const requestJson = {
      message: question,
      api_key: CHAD_API_KEY,
    };
 
    try {
      const response = await axios.post(
        "https://ask.chadgpt.ru/api/public/gpt-3.5",
        requestJson
      );
 
      if (response.status === 200) {
        const respJson = response.data;
 
        if (respJson.is_success) {
          const respMsg = respJson.response;
          const usedWords = respJson.used_words_count;
          ctx.reply(`–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: ${respMsg}\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–ª–æ–≤: ${usedWords}`);
        } else {
          const error = respJson.error_message;
          ctx.reply(`–û—à–∏–±–∫–∞: ${error}`);
        }
      } else {
        ctx.reply(`–û—à–∏–±–∫–∞! –ö–æ–¥ http-–æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      }
    } catch (error) {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
    }
  });
});
 
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/schedule"
bot.command("schedule", async (ctx) => {
  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback("–ù–∞ –¥–µ–Ω—å", "schedule_day"),
    Markup.button.callback("–ù–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é", "schedule_week"),
  ]);
 
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", keyboard);
});
 
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/deadlines"
bot.command("deadlines", (ctx) => {
  let response = "*–î–µ–¥–ª–∞–π–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∏:*\n\n";
 
  if (deadlines && deadlines.deadlines) {
    for (const student of deadlines.deadlines) {
      if (student && student.deadlines) {
        for (const deadline of student.deadlines) {
          const now = new Date();
          const deadlineDate = new Date(deadline.date);
 
          if (deadlineDate > now) {
            response += `üìö *–ü—Ä–µ–¥–º–µ—Ç:* ${
              deadline.object
            }\n‚è≥ *–î–µ–¥–ª–∞–π–Ω:* ${formatDate(deadlineDate)}\n\n`;
          }
        }
      }
    }
  }
 
  const keyboard = Markup.inlineKeyboard([
    Markup.button.callback("–í—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã", "all_deadlines"),
  ]);
 
  ctx.reply(response, { parse_mode: "Markdown", ...keyboard });
});
 
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/faq"
bot.command("faq", (ctx) => {
  let response = "*–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:*\n\n";
 
  faq.faq.forEach((qa) => {
    response += `*‚ùì –í–æ–ø—Ä–æ—Å:* ${qa.question}\n*üí¨ –û—Ç–≤–µ—Ç:* ${qa.answer}\n\n`;
  });
 
  ctx.reply(response, { parse_mode: "Markdown" });
});
 
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/account"
bot.command("account", async (ctx) => {
  ctx.reply("–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app: { url: account } }],
        [{ text: "–ó–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", web_app: { url: schedule } }],
        [{ text: "–í –∫–∞–º–ø—É—Å", web_app: { url: campus } }],
      ],
    },
  });
});
 
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/start"
bot.start((ctx) =>
  ctx.reply(
    "–ü—Ä–∏–≤—è—É, –≤—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é—à–∫–µ\n–ê –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã —Å—é–¥–∞, –∞ —è –∫–∞–∫ —á–∞—Ç-–±–æ—Ç –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç–∏—Ç—å ;)"
  )
);
 
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("text", async (ctx) => {
  const question = ctx.message.text;
 
  const requestJson = {
    message: question,
    api_key: CHAD_API_KEY,
  };
 
  try {
    const response = await axios.post(
      "https://ask.chadgpt.ru/api/public/gpt-3.5",
      requestJson
    );
 
    if (response.status === 200) {
      const respJson = response.data;
 
      if (respJson.is_success) {
        const respMsg = respJson.response;
        const usedWords = respJson.used_words_count;
        ctx.reply(`–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: ${respMsg}\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–ª–æ–≤: ${usedWords}`);
      } else {
        const error = respJson.error_message;
        ctx.reply(`–û—à–∏–±–∫–∞: ${error}`);
      }
    } else {
      ctx.reply(`–û—à–∏–±–∫–∞! –ö–æ–¥ http-–æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    }
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
  }
});
 
// –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
bot.launch();
 
// —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ ui –º–µ–Ω—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
bot.telegram.setMyCommands([
  { command: "schedule", description: "–í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" },
  { command: "question", description: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" },
  { command: "deadlines", description: "–¢–µ–∫—É—â–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã" },
  { command: "faq", description: "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã" },
  { command: "account", description: "–ü–æ—Ä—Ç–∞–ª—ã" },
]);
 
// –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));